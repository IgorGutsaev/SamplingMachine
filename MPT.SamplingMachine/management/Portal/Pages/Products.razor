@page "/products"
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Portal.StateContainers;
@using System.Diagnostics;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject AppState State
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client
@inject ProductStateContainer productStateContainer

<PageTitle>Products</PageTitle>

<h1>Products</h1>

<p>List of products</p>

@if (products == null) {
    <p><em>Loading...</em></p>
}
else {
    <button type="button" class="btn btn-primary mb-3" data-bs-toggle="modal" data-bs-target="#addProductModal">
        New
    </button>

    <!-- Modal -->
    <div class="modal fade" id="addProductModal" tabindex="-1" aria-labelledby="addProductModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addProductModalLabel">New kiosk</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">Sku</span>
                        <input type="text" class="form-control" placeholder="E.g. '1234'" @bind="_newUid" aria-label="Sku" aria-describedby="basic-addon1">
                        <input type="text" class="form-control" placeholder="E.g. 'Lipstick'" @bind="_newName" aria-label="Name" aria-describedby="basic-addon1">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary close" data-dismiss="modal" data-bs-dismiss="modal">Close</button>
                    <button type="button" disabled="@string.IsNullOrWhiteSpace(_newUid)" class="btn btn-primary" @onclick="() => Create(_newUid)">Create</button>
                </div>
            </div>
        </div>
    </div>

    <div class="container-fluid">
        <div class="row">
            <div class="col-5">
                <div class="input-group input-group-lg mb-3">
                    <input type="text" class="form-control" placeholder="Sku or name" @bind-value="filter" aria-label="Username" aria-describedby="filterGroup">

                    @if (stillReceivingProducts) {
                        <button class="btn btn-secondary btn-large" onclick="@Cancel">Stop</button>
                    }
                    else {
                        <button class="btn btn-primary btn-large" @onclick="() => { SearchProducts(); }">Search</button>
                    }
                </div>
            </div>
            <div class="col-7"></div>
        </div>
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Sku</th>
                <th>Picture</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var product in products) {
                <tr>
                    <td>
                        <button class="btn btn-light" @onclick="() => EditProduct(product.Sku)">@product.Sku</button>
                    </td>
                    <td>
                        @if (!string.IsNullOrWhiteSpace(product.Picture))
                        {
                            <img src="data:image/*;base64,@product.Picture" width="100" />
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    @if (stillReceivingProducts) {
        <p><em>Loading...</em></p>
    }
}

@code {
    bool stillReceivingProducts = false;
    protected string _newUid;
    protected string _newName;

    private List<Product> products = new List<Product>();
    CancellationTokenSource loadingTokenSource;

    string filter;

    protected override async Task OnInitializedAsync() {
        if (State.User == null) {
            navigationManager.NavigateTo("login");
            return;
        }

        await SearchProducts();
    }

    private async Task SearchProducts() {
        products = new List<Product>();
        loadingTokenSource = new CancellationTokenSource();

        IAsyncEnumerator<Product> e = _client.GetProductsAsync(filter, loadingTokenSource.Token);
        try {
            while (await e.MoveNextAsync()) {
                products.Add(e.Current);
                stillReceivingProducts = true;

                try {
                    await JSRuntime.InvokeVoidAsync("console.info", $"Product received: {e.Current.Sku}");
                }
                catch { }

                StateHasChanged();
            }
        }
        finally {
            if (e != null)
                await e.DisposeAsync();

            stillReceivingProducts = false;
            StateHasChanged();
        }
    }

    private void EditProduct(string sku) {
        productStateContainer.SetValue(products.First(x => x.Sku == sku));
        navigationManager.NavigateTo($"/product/{sku}");
    }

    private void Cancel() {
        loadingTokenSource.Cancel();
        StateHasChanged();
    }

    private async Task Create(string uid) {
        Product p = new Product { Sku = uid };
        if (!string.IsNullOrWhiteSpace(_newName))
            p.Names = new LocalizedValue[] { LocalizedValue.Bind(Filuet.Infrastructure.Abstractions.Enums.Language.English, _newName.Trim()) };

        await _client.PutProductAsync(p);
        filter = uid;
        await SearchProducts();
        await JSRuntime.InvokeVoidAsync("ui.hideModalManually", "addProductModal");
    }
}