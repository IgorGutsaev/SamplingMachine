@page "/transactions";
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Microsoft.AspNetCore.SignalR.Client;
@using Portal.StateContainers;
@using System.Text.Json;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client
@inject NavigationManager _uriHelper
@inject TransactionStateContainer transactionStateContainer

<PageTitle>Transactions</PageTitle>

<h1>Transactions</h1>

<p>List of transactions</p>


<div class="container-fluid">
    <div class="row">
        <div class="col-8">
            <div class="input-group input-group-lg mb-3">
                <input type="datetime-local" class="form-control" @bind-value="from" />
                <input type="datetime-local" class="form-control" @bind-value="to" />
                <input id="phone" type="tel" class="form-control" placeholder="Phone number" @bind-value="phoneNumber" aria-label="Number" aria-describedby="filterGroup">

                @if (stillReceivingProducts) {
                    <button class="btn btn-secondary btn-large" onclick="@Cancel">Stop</button>
                }
                else {
                    <button class="btn btn-primary btn-large" @onclick="() => { SearchTransactions(); }">Search</button>
                }
            </div>
        </div>
        <div class="col-7"></div>
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>Number</th>
            <th>Date</th>
            <th>Credit used</th>
        </tr>
    </thead>
    <tbody>

        @if (transactions != null) {
            foreach (var transaction in transactions) {
                string popoverId = PopoverContentId(transaction);
                <tr>
                    <td>
                        <button id="@TransactionId(transaction)" type="button" class="btn btn-sm btn-dark" data-bs-toggle="popover" @onclick="() => GoToTransactionDetails(transaction)" data-bs-trigger="hover" title="Transaction @transaction.PhoneNumber" data-bs-content-id="@popoverId">@transaction.PhoneNumber</button>
                        <div id="@popoverId" class="d-none">
                            @foreach (var item in transaction.Items) {
                                <span class="badge bg-warning text-dark">Credit: @(item.UnitCredit * item.Count)</span>
                                <strong>&nbsp;@item.Product.Sku</strong>
                                <span>&nbsp;x&nbsp;@item.Count</span>
                                <br>
                            }
                        </div>
                    </td>
                    <td>
                        @transaction.Date.ToString("HH:mm:ss dd/MMM/yyyy")
                    </td>
                    <td>
                        <span class="badge bg-warning text-dark">@transaction.Items.Sum(x => x.UnitCredit * x.Count)</span>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

<script>
    window.onload = () => {
        $('#phone').on('keypress', function (event) {
            var regex = new RegExp("^[0-9]+$");
            var key = String.fromCharCode(!event.charCode ? event.which : event.charCode);
            if (!regex.test(key)) {
                event.preventDefault();
                return false;
            }
        });
    };
</script>

@code {
    private List<Transaction> transactions;
    private HubConnection hubConnectionEditBelt;

    CancellationTokenSource loadingTokenSource;
    bool stillReceivingProducts = false;
    string phoneNumber;
    DateTime from = DateTime.Now.Date;
    DateTime to = DateTime.Now.Date.AddDays(1);

    protected override async Task OnInitializedAsync() {

        hubConnectionEditBelt = new HubConnectionBuilder()
           .WithUrl(_uriHelper.ToAbsoluteUri("/hookhub"))
           .Build();

        hubConnectionEditBelt.On<string>("OnNewTransaction", async (data) => {
            Transaction transaction = JsonSerializer.Deserialize<Transaction>(data);
            List<Transaction> listOfTransactions = transactions.ToList();
            listOfTransactions.Insert(0, transaction);
            transactions = listOfTransactions;

            await InvokeAsync(() => {
                StateHasChanged();
            });

            await JSRuntime.InvokeVoidAsync("ui.htmlizePopover");
        });

        await hubConnectionEditBelt.StartAsync();
        await SearchTransactions();
        await JSRuntime.InvokeVoidAsync("ui.htmlizePopover");
    }

    private async Task GoToTransactionDetails(Transaction transaction) {
        await JSRuntime.InvokeVoidAsync("ui.hidePopover");
        transactionStateContainer.SetValue(transaction);
        navigationManager.NavigateTo($"/transaction/{transaction.PhoneNumber}");
    }

    private string PopoverContentId(Transaction transaction)
        => $"popover-content-{TransactionId(transaction)}";

    private string TransactionId(Transaction transaction)
        => $"{transaction.PhoneNumber}-{transaction.Date:ddMMyyHHmmss}";

    protected override async void OnAfterRender(bool firstRender) {
        if (firstRender) {
            await JSRuntime.InvokeVoidAsync("onload");
        }
    }

    private async Task SearchTransactions() {
        transactions = new List<Transaction>();
        loadingTokenSource = new CancellationTokenSource();

        IAsyncEnumerator<Transaction> e = _client.GetTransactionsAsync(new TransactionRequest { From = from, To = to, MobileNumber = phoneNumber }, loadingTokenSource.Token);
         try {
             while (await e.MoveNextAsync()) {
                 transactions.Add(e.Current);
                 stillReceivingProducts = true;

                 try {
                     await JSRuntime.InvokeVoidAsync("console.info", $"Transaction received: {e.Current.PhoneNumber}");
                 }
                 catch { }

                 StateHasChanged();
             }
         }
         finally {
             if (e != null)
                 await e.DisposeAsync();

             stillReceivingProducts = false;
             StateHasChanged();
         }
    }

    private void Cancel() {
        loadingTokenSource.Cancel();
        StateHasChanged();
    }
}