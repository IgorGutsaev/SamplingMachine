@page "/advertisement"
@using Filuet.Hardware.Dispensers.Abstractions.Models;
@using Filuet.Infrastructure.Abstractions.Helpers;
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Portal.StateContainers;
@using System.Text.Json;
@using System.Diagnostics;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime 
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client;

<!-- Media max size toaster -->
<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div class="toast-container position-absolute top-0 end-0 p-3">
        <div id="toastNotice" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto"><i class="bi bi-exclamation-triangle-fill text-warning"></i> OgmentO</strong>
                <small>just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                The file is too large. Limit is @MAX_MP4_SIZE_MB for mp4 and @MAX_MP4_SIZE_MB for gif files
            </div>
        </div>
    </div>
</div>


<PageTitle>Advertisement</PageTitle>

<h1>Advertisement</h1>

<p>
    @if (saving)
    {
@*         <button class="btn btn-primary btn-lg" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Saving...
        </button> *@
    }
    else
    {
       @*  <a href="/kiosk/@uid" type="button" class="btn btn-primary btn-lg">Back to @kiosk.UID</a>*@
    } 
</p>

@if (loading)
{
    <p><em>Loading...</em></p>
}
else {
    <div class="mb-3">
        <button type="button" class="btn btn-primary" onclick="document.getElementById('flpicker').click()">New media</button>
        <InputFile id="flpicker" accept=".mp4,.gif" OnChange="@LoadFile" hidden />
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
            </tr>
        </thead>
        <tbody>
            @if (_media != null)
                foreach (var m in _media) {
                    <tr>
                        <td>
                            @m.Name
                        </td>
                        <td>
                           @m.Type.GetCode()
                        </td>
                    </tr>
                }
        </tbody>
    </table>
}

<script>
    window.showMaxSizeAlert = (type, size) => {
        var myAlert = document.getElementById('toastNotice');
        var bsAlert = new bootstrap.Toast(myAlert);//inizialize it
        bsAlert.show();
    };
</script>

@code {
    const int MAX_MP4_SIZE_MB = 10;
    const int MAX_GIF_SIZE_MB = 3;

    private bool loading = true;
    private bool saving = false;
    private IEnumerable<AdMedia> _media;

    protected override async Task OnInitializedAsync()
    {
        _media = await _client.GetMediaAsync();
        loading = false;
        StateHasChanged();
    }

    private async Task LoadFile(InputFileChangeEventArgs e) {
        AdMediaType type = EnumHelpers.GetValueFromCode<AdMediaType>(Path.GetExtension(e.File.Name).Replace(".", ""));

        int maxSize = (type == AdMediaType.mp4 ? MAX_MP4_SIZE_MB : MAX_GIF_SIZE_MB) * 1000000;
        byte[] buffer = new byte[e.File.Size];

        try
        {
            using MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream(maxSize).CopyToAsync(ms);
            ms.Position = 0;
            buffer = ms.ToArray();
        }
        catch (System.IO.IOException)
        {
            await JSRuntime.InvokeVoidAsync("showMaxSizeAlert");
            return;
        }

        await _client.UploadMefiaFileAsync(e.File.Name, buffer);
    }
}