@page "/advertisement"
@using Filuet.Hardware.Dispensers.Abstractions.Models;
@using Filuet.Infrastructure.Abstractions.Helpers;
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Portal.StateContainers;
@using System.Text.Json;
@using System.Diagnostics;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client;

<!-- Media max size toaster -->
<div aria-live="polite" aria-atomic="true" class="position-relative">
    <div class="toast-container position-absolute top-0 end-0 p-3">
        <div id="toastNotice" class="toast" role="alert" aria-live="assertive" aria-atomic="true">
            <div class="toast-header">
                <strong class="me-auto"><i class="bi bi-exclamation-triangle-fill text-warning"></i> OgmentO</strong>
                <small>just now</small>
                <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
            </div>
            <div class="toast-body">
                The file is too large. Limit is @MAX_MP4_SIZE_MB for mp4 and @MAX_MP4_SIZE_MB for gif files
            </div>
        </div>
    </div>
</div>


<PageTitle>Advertisement</PageTitle>

<h1>Advertisement</h1>

<p>
    @if (saving) {
        @*         <button class="btn btn-primary btn-lg" type="button" disabled>
    <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
    Saving...
    </button> *@
    }
    else {
        @*  <a href="/kiosk/@uid" type="button" class="btn btn-primary btn-lg">Back to @kiosk.UID</a>*@
    }
</p>

@if (loading) {
    <p><em>Loading...</em></p>
}
else {
    <div class="mb-3">
        <button type="button" class="btn btn-primary" onclick="document.getElementById('flpicker').click()">New media</button>
        <InputFile id="flpicker" accept=".mp4,.gif" OnChange="@LoadFile" hidden />
    </div>

    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Type</th>
                <th>Size, Mb</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (_media != null)
                foreach (var m in _media) {
                    <tr>
                        <td class="align-middle">
                            <button type="button" class="btn btn-link" @onclick="() => ShowAdMedia(m)">@m.Name</button>
                            @*  data-bs-toggle="modal" data-bs-target="#viewResourceModal">@m.Name</button> *@
                        </td>
                        <td class="align-middle">
                            @if (m.Type == AdMediaType.mp4) {
                                <img src="/img/mp4.png" style="max-height: 1.2em" />
                            }
                            else if (m.Type == AdMediaType.gif) {
                                <img src="/img/gif.png" style="max-height: 1.2em" />
                            }
                        </td>
                        <td class="align-middle">
                            @(Math.Round(m.Size / 1000000.0, 2))
                        </td>
                        <td>
                            @if (m.CanDelete) {
                                <button type="button" class="btn btn-danger" @onclick="e => Delete(m.Hash)">Delete</button>
                            }
                            else {
                                <span class="d-inline-block" tabindex="0" data-toggle="tooltip" title="Can't delete. The resource is associated with some kiosks">
                                    <button type="button" class="btn btn-danger" disabled>Delete</button>
                                </span>
                            }
                        </td>
                    </tr>
                }
        </tbody>
    </table>

    @if (uploading) {
        <span class="spinner-border spinner-border-sm ms-3" role="status" aria-hidden="true"></span>
    }


    <!-- Modal: view resource -->
    <div class="modal fade" id="viewResourceModal" tabindex="-1" aria-labelledby="viewResourceModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="viewResourceModalLabel">@_selectedResource?.Name</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    @if (string.IsNullOrEmpty(_selectedResourceData)) {
                        <span class="spinner-border spinner-border-sm ms-3" role="status" aria-hidden="true"></span>
                    }
                    else {
                        @if (_selectedResource.Type == AdMediaType.mp4)
                        {
                            <video width="100%" height="100%" controls>
                                <source type="video/mp4" src="data:video/mp4;base64,@_selectedResourceData">
                            </video>
                        }
                        else if (_selectedResource.Type == AdMediaType.gif) {
                            <img src='data:image/gif;base64,@_selectedResourceData' />
                        }
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary close" data-dismiss="modal" data-bs-dismiss="modal">Close</button>
                </div>
            </div>
        </div>
    </div>
}

<script>
    window.showMaxSizeAlert = (type, size) => {
        var myAlert = document.getElementById('toastNotice');
        var bsAlert = new bootstrap.Toast(myAlert);
        bsAlert.show();
    };

    window.showAdMedia = () => {
        var bsAlert = new bootstrap.Modal(document.getElementById('viewResourceModal'))
        bsAlert.show();
    };
</script>

@code {
    const int MAX_MP4_SIZE_MB = 10;
    const int MAX_GIF_SIZE_MB = 3;

    private bool loading = true;
    private bool uploading = false;
    private bool saving = false;
    private IEnumerable<AdMedia> _media;

    private AdMedia _selectedResource;
    private string _selectedResourceData;

    protected override async Task OnInitializedAsync() {
        _media = await _client.GetMediaAsync();
        loading = false;
        StateHasChanged();
    }

    private async Task LoadFile(InputFileChangeEventArgs e) {
        AdMediaType type = EnumHelpers.GetValueFromCode<AdMediaType>(Path.GetExtension(e.File.Name).Replace(".", ""));

        int maxSize = (type == AdMediaType.mp4 ? MAX_MP4_SIZE_MB : MAX_GIF_SIZE_MB) * 1000000;
        byte[] buffer = new byte[e.File.Size];

        try {
            using MemoryStream ms = new MemoryStream();
            await e.File.OpenReadStream(maxSize).CopyToAsync(ms);
            ms.Position = 0;
            buffer = ms.ToArray();
        }
        catch (System.IO.IOException) {
            await JSRuntime.InvokeVoidAsync("showMaxSizeAlert");
            return;
        }

        uploading = true;
        this.StateHasChanged();

        string hash = await _client.UploadMediaFileAsync(e.File.Name, buffer);
        await _client.PutMediaAsync(new NewMediaRequest { FileName = e.File.Name, Hash = hash });

        var newList = _media.ToList();
        newList.Add(new AdMedia {
            Type = type,
            Hash = hash,
            CanDelete = true,
            Name = Path.GetFileNameWithoutExtension(e.File.Name),
            Size = (int)e.File.Size
        });
        _media = newList;
        uploading = false;
    }

    private async Task Delete(string hash) {
        await _client.DeleteMediaAsync(hash);
        var _newMedia = _media.ToList();
        _newMedia.Remove(_media.FirstOrDefault(x => x.Hash == hash));
        _media = _newMedia;
    }

    private async Task ShowAdMedia(AdMedia resource) {
        _selectedResource = resource;
        _selectedResourceData = string.Empty;
        await JSRuntime.InvokeVoidAsync("showAdMedia");
        byte[] data = await _client.DownloadMediaAsync(_selectedResource.Hash, _selectedResource.Type.GetCode());
        _selectedResourceData = Convert.ToBase64String(data);
    }
}