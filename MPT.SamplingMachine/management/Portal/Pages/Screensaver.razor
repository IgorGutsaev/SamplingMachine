@page "/screensaver/{kioskUid}"
@using Filuet.Hardware.Dispensers.Abstractions.Models;
@using Filuet.Infrastructure.Abstractions.Helpers;
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Portal.StateContainers;
@using System.Text.Json;
@using System.Diagnostics;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client;
@inject KioskStateContainer kioskStateContainer

<PageTitle>Screensaver</PageTitle>

<h1>Screensaver</h1>

@if (!saving) {
    <button type="button" class="btn btn-primary me-2">Add</button>
}
else {
    <button type="button" class="btn btn-primary" disabled>Saving...</button>
}

@if (loading) {
    <p><em>Loading...</em></p>
}
else {
    <table class="table">
        <thead>
            <tr>
                <th>Start</th>
                <th>Name</th>
                <th>Type</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            @if (_resources != null)
                foreach (var r in _resources) {
                    <tr>
                        <td>
                            @* @r.Start.ToString("HH:mm:ss") *@
                            <div class="cs-form">
                                <input id="time_@r.Media.Hash" type="time" class="form-control" value="@r.Start.ToString("HH:mm:ss")" @onchange="e => StartTimeChanged(e, r.Media.Hash)" />
                            </div>
                        </td>
                        <td>
                            @r.Media.Name
                        </td>
                        <td>
                            @r.Media.Type.GetCode()
                        </td>
                        <td>
                            @if (!r.Active) {
                                <button type="button" class="btn btn-secondary" @onclick="async e => await SetActive(r, true)">Inactive</button>
                            }
                            else {
                                <button type="button" class="btn btn-primary" @onclick="async e => await SetActive(r, false)">Active</button>
                            }
                        </td>
                    </tr>
                }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string kioskUid { get; set; }

    private bool loading = true;
    private bool saving = false;
    private IEnumerable<KioskMediaLink> _resources;
    private IEnumerable<AdMedia> _media;
    private string newMediaSerialized;

    protected override async Task OnInitializedAsync() {
        _resources = await _client.GetKioskMediaAsync(kioskUid);
        _media = await _client.GetMediaAsync();

        loading = false;
        StateHasChanged();
    }

    private async Task StartTimeChanged(ChangeEventArgs e, string hash) {
        DateTime newStartTime = DateTime.Parse(e.Value.ToString());
        newStartTime = DateTime.MinValue.AddHours(newStartTime.Hour).AddMinutes(newStartTime.Minute).AddSeconds(newStartTime.Second);
        _resources.FirstOrDefault(x => x.Media.Hash == hash).Start = newStartTime;

        newMediaSerialized = JsonSerializer.Serialize(_resources);

        await Task.Delay(1000).ContinueWith(async t => {
            await Task.Run(async () => {
                _resources = _resources.OrderBy(x => x.Start).ToList(); // do not remove toList, otherwise blazor tracks ordering changes
                await OnResourcesChangedAsync();
            });
        });
    }

    private async Task OnResourcesChangedAsync() {
        if (newMediaSerialized == JsonSerializer.Serialize(_resources)) {
            saving = true;
            await _client.PutKioskMediaAsync(kioskUid, _resources);
            saving = false;
            await InvokeAsync(StateHasChanged);
        }
    }

    private async Task SetActive(KioskMediaLink link, bool active) {
        link.Active = active;
        newMediaSerialized = JsonSerializer.Serialize(_resources);
        await OnResourcesChangedAsync();
    }
}