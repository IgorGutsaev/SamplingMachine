@page "/transaction/{uid}";
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Microsoft.AspNetCore.SignalR.Client;
@using Portal.StateContainers;
@using System.Text.Json;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject AppState State
@inject NavigationManager navigationManager
@inject TransactionStateContainer transactionStateContainer
@inject SamplingMachineApiClient _client
@inject ProductStateContainer productStateContainer

<PageTitle>Transaction</PageTitle>

<h1>@transaction.PhoneNumber</h1>

<p>@transaction.Date.ToString("HH:mm:ss dd/MMM/yyyy")</p>

<p><a href="/transactions" class="link-body-emphasis link-offset-2 link-underline-opacity-25 link-underline-opacity-75-hover">Transactions</a></p>


@if (!loading) {
    <TransactionItemList Transaction="transaction" />

    if (loadingHistory) {
        <button class="btn btn-success" type="button">
            <span class="spinner-grow text-white spinner-grow-sm" role="status"></span>
            Loading related transactions...
        </button>
    }
    else {
        if (history == null) {
            <button class="btn btn-success" type="button" onclick="@LoadHistory">
                Load related transactions
            </button>
        }
        else {
            if (!history.Any(x => x.Date != transaction.Date)) {
                <p>There are no more transactions to show</p>
            }
            else {
                <p>Other orders</p>

                <div class="accordion" id="accordionHistory">
                    @{
                        int i = 0;

                        foreach (var entry in history) {
                            if (entry.Date == transaction.Date)
                                continue;

                            i++;

                            <div class="accordion-item">
                                <h2 class="accordion-header" id="heading_@i">
                                    <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapse_@i" aria-controls="collapse_@i">
                                        <span class="badge bg-warning text-dark">Credit used: @entry.Items.Sum(x => x.Count * x.UnitCredit)</span>&nbsp;@entry.Date.ToString("HH:mm:ss dd/MMM/yyyy")
                                    </button>
                                </h2>
                                <div id="collapse_@i" class="accordion-collapse collapse" aria-labelledby="heading_@i" data-bs-parent="#accordionHistory">
                                    <div class="accordion-body">
                                        <TransactionItemList Transaction="entry" />
                                    </div>
                                </div>
                            </div>
                        }
                    }
                </div>
            }
        }
    }
}
else {
    <p><em>Loading...</em></p>
}

@code {
    [Parameter]
    public string uid { get; set; }

    private Transaction transaction;
    private bool loading = true;
    private bool loadingHistory = false;
    private List<Transaction> history;
    private List<Product> products = new List<Product>();

    protected override async Task OnInitializedAsync() {
        if (State.User == null) {
            navigationManager.NavigateTo("login");
            return;
        }

        transaction = transactionStateContainer.Value;

        loading = transaction.Items.Any(x => x.Product.Names == null || x.Product.Picture == null);
        if (loading) {
            List<Task> tasks = new List<Task>();

            foreach (var i in transaction.Items)
                tasks.Add(_client.GetProductAsync(i.Product.Sku)
                .ContinueWith(x => {
                    i.Product = x.Result;
                    if (!products.Any(p => p.Sku == i.Product.Sku))
                        products.Add(x.Result);
                }));

            await Task.WhenAll(tasks.ToArray());

            loading = false;
        }
    }

    private void EditProduct(Product product) {
        productStateContainer.SetValue(product);
        navigationManager.NavigateTo($"/product/{product.Sku}");
    }

    private async Task LoadHistory() {
        loadingHistory = true;
        history = new List<Transaction>();

        IAsyncEnumerator<Transaction> e = _client.GetTransactionsAsync(new TransactionRequest {
                MobileNumber = transaction.PhoneNumber,
                From = new DateTime(2023, 9, 1),
                To = DateTime.Now.AddDays(1)
            });

        try {
            while (await e.MoveNextAsync()) {
                history.Add(e.Current);

                try {
                    await JSRuntime.InvokeVoidAsync("console.info", $"Transaction received: {e.Current.PhoneNumber}");
                }
                catch { }

                StateHasChanged();
            }
        }
        finally {
            if (e != null)
                await e.DisposeAsync();

            StateHasChanged();
        }

        #region get missing product details
        List<string> skuToSync = new List<string>();
        foreach (var s in history)
            foreach (var i in s.Items)
                if (!products.Any(x => x.Sku == i.Product.Sku) && !skuToSync.Contains(i.Product.Sku))
                    skuToSync.Add(i.Product.Sku);

        List<Product> missingProducts = new List<Product>();

        IAsyncEnumerator<Product> en = _client.GetProductsAsync(skuToSync, default(CancellationToken));
        try {
            while (await en.MoveNextAsync()) {
                missingProducts.Add(en.Current);
            }
        }
        finally {
            if (e != null)
                await e.DisposeAsync();
        }

        products.AddRange(missingProducts);

        foreach (var s in history)
            foreach (var i in s.Items)
                if (i.Product.Names == null || i.Product.Picture == null)
                    i.Product = products.FirstOrDefault(x => x.Sku == i.Product.Sku);
        #endregion

        loadingHistory = false;
    }
}