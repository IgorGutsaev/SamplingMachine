@page "/kiosks"
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Portal.StateContainers;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject AppState State
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client
@inject KioskStateContainer kioskStateContainer

<PageTitle>Kiosks</PageTitle>

<h1>Kiosks</h1>

<p>List of kiosks</p>

@if (loading) {
    <p><em>Loading...</em></p>
}
else {
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addKioskModal">
        Create a new one
    </button>

    <!-- Modal -->
    <div class="modal fade" id="addKioskModal" tabindex="-1" aria-labelledby="addKioskModalLabel" aria-hidden="true">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="addKioskModalLabel">New kiosk</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <div class="input-group mb-3">
                        <span class="input-group-text" id="basic-addon1">Name</span>
                        <input type="text" class="form-control" placeholder="E.g. 'baz'" @bind="_newUid" aria-label="Name" aria-describedby="basic-addon1">
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary close" data-dismiss="modal" data-bs-dismiss="modal">Close</button>
                    <button type="button" disabled="@string.IsNullOrWhiteSpace(_newUid)" class="btn btn-primary" @onclick="() => Create(_newUid)">Create</button>
                </div>
            </div>
        </div>
    </div>

    if (kiosks != null && kiosks.Any()) {
        <table class="table mt-4">
            <thead>
                <tr>
                    <th>Name</th>
                    <th>Online</th>
                    <th>Stock</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var kiosk in kiosks) {
                    <tr>
                        <td>
                            <button class="btn btn-light btn-sm" @onclick="() => Edit(kiosk.UID)">@kiosk.UID</button>
                        </td>
                        <td>
                            @if (kiosk.IsOn) {
                                <i class="oi oi-media-record" aria-hidden="true" style="color: #26aa5e; font-size: 1.6em; padding-left: 0.45em" />
                            }
                            else {
                                <i class="oi oi-media-record" aria-hidden="true" style="color: #808080; font-size: 1.6em; padding-left: 0.45em" />
                            }
                        </td>
                        <td>
                            <div class="progress w-75">
                                <div class="progress-bar bg-@_stockLevel(kiosk)" role="progressbar" style="width: @_stockPercent(kiosk)%;" aria-valuenow="@_stockPercent(kiosk)" aria-valuemin="0" aria-valuemax="100">@_stockPercent(kiosk)%</div>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

@code {
    private bool loading = false;
    private IEnumerable<Kiosk> kiosks;
    protected string _newUid;

    private int _stockPercent(Kiosk k)
        => (int)(100 * (decimal)k.ProductLinks.Sum(x => x.RemainingQuantity) / (decimal)k.ProductLinks.Sum(x => x.MaxQuantity));

    protected override async Task OnInitializedAsync() {
        if (State.User == null) {
            navigationManager.NavigateTo("login");
            return;
        }

        loading = true;
        kiosks = await _client.GetKiosksAsync();
        loading = false;
    }

    private async Task Create(string uid) {
        Kiosk newKiosk = await _client.AddKioskAsync(uid);
        var kioskList = kiosks.ToList();
        kioskList.Insert(0, newKiosk);
        kiosks = kioskList;
        await JSRuntime.InvokeVoidAsync("ui.hideModalManually", "addKioskModal");
    }

    private async Task Edit(string uid) {
        Kiosk kiosk = kiosks.First(x => x.UID == uid);
        kioskStateContainer.SetValue(kiosk);
        navigationManager.NavigateTo($"/kiosk/{uid}");
    }

    private string _stockLevel(Kiosk k) {
        int level = _stockPercent(k);
        if (level >= 50)
            return "success";
        else if (level >= 25 && level < 50)
            return "warning";
        else if (level < 25)
            return "danger";

        return string.Empty;
    }
}