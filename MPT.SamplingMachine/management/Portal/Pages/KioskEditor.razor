@page "/kiosk/{uid}"
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using System.Text.Json;
@using System.Diagnostics;
@using System.Drawing;
@using System.Web;
@using System.Drawing.Imaging;
@using Portal.StateContainers;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client;
@inject KioskStateContainer kioskStateContainer
@inject ProductStateContainer productStateContainer

<PageTitle>Kiosk</PageTitle>

<h1>@uid</h1>

@if (kiosk == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="input-group mb-3">
        <label class="input-group-text" for="inputGroupSelect01">Show logoff popup after</label>
        <select class="form-select" id="inputGroupSelect01">
            <option selected>Choose...</option>
            <option value="1">1 minute</option>
            <option value="2">2 minutes</option>
            <option value="3">3 minutes</option>
        </select>
    </div>

    <h5>Products</h5>

    @if (productsToLink != null && productsToLink.Any())
    {
        <button type="button" class="btn btn-primary">Add</button>
    }
    else
    {
        <span class="d-inline-block" tabindex="0" data-toggle="tooltip" title="Nothing to add">
            <button class="btn btn-primary" style="pointer-events: none;" type="button" disabled>Add</button>
        </span>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Sku</th>
                <th>Credit</th>
                <th>Max quantity in order</th>
                <th>Remaining quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var link in kiosk.ProductLinks)
            {
                <tr>
                    <td>
                        <button class="btn btn-light" @onclick="() => EditProduct(link.Product.Sku)">@link.Product.Sku</button>
                    </td>
                    <td>
                        @link.Credit
                    </td>
                    <td>
                        @link.MaxCountPerSession
                    </td>
                    <td>
                        @link.RemainingQuantity
                    </td>
                    <td>
                        @if (!link.Disabled)
                        {
                            <button type="button" class="btn btn-warning" @onclick="() => DisableProduct(link.Product.Sku)">Disable</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-success" @onclick="() => EnableProduct(link.Product.Sku)">Enable</button>
                            <button type="button" class="btn btn-danger" @onclick="() => DeleteProductLink(link.Product.Sku)">Delete</button>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string uid { get; set; }

    private KioskDto kiosk;
    private int idleTimeoutMin;
    private IEnumerable<ProductDto> products;
    private IEnumerable<ProductDto> productsToLink;

    protected override async Task OnInitializedAsync()
    {
        kiosk = kioskStateContainer.Value;
        products = await _client.GetProductsAsync();
        productsToLink = products.Where(x => !kiosk.ProductLinks.Any(l => l.Product.Sku == x.Sku));
    }

    private void EditProduct(string sku)
    {
        productStateContainer.SetValue(kiosk.ProductLinks.First(x => x.Product.Sku == sku).Product);
        navigationManager.NavigateTo($"/product/{sku}");
    }

    private async void DisableProduct(string sku)
    {
        await _client.DisableProductLinkAsync(kiosk.UID, sku);
        kiosk.ProductLinks.FirstOrDefault(x => x.Product.Sku == sku).Disabled = true;
        this.StateHasChanged();
    }

    private async void EnableProduct(string sku)
    {
        await _client.DisableProductLinkAsync(kiosk.UID, sku);
        kiosk.ProductLinks.FirstOrDefault(x => x.Product.Sku == sku).Disabled = false;
        this.StateHasChanged();
    }

    private async void DeleteProductLink(string sku)
    {
        await _client.DeleteProductLinkAsync(kiosk.UID, sku);
        kiosk.ProductLinks = kiosk.ProductLinks.Where(x => x.Product.Sku != sku);
        productsToLink = products.Where(x => !kiosk.ProductLinks.Any(l => l.Product.Sku == x.Sku));

        this.StateHasChanged();
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("ui.activateTooltips");
    }
}
