@page "/kiosk/{uid}"
@using Filuet.Infrastructure.Abstractions.Enums;
@using Filuet.Infrastructure.Abstractions.Helpers;
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using System.Text.Json;
@using System.Diagnostics;
@using System.Drawing;
@using System.Web;
@using System.Drawing.Imaging;
@using Portal.Models;
@using Portal.StateContainers;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client
@inject KioskStateContainer kioskStateContainer
@inject ProductStateContainer productStateContainer

<PageTitle>Kiosk</PageTitle>

<h1>@uid</h1>

@if (kiosk == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h5>Settings</h5>

    <div class="container">
        <div class="row">
            <div class="col-2">
                <div class="form-check form-switch" style="padding-top: 0.5rem">
                    <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @bind="IsOn" />
                    <label class="form-check-label" for="flexSwitchCheckDefault">Turned on</label>
                </div>
            </div>
            <div class="col-4">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupSelect01">Logoff after</label>
                    <select class="form-select" id="inputGroupSelect01" @bind="IdleTimeout">
                        <option selected>Choose...</option>
                        <option value="1">1 minute</option>
                        <option value="2">2 minutes</option>
                        <option value="3">3 minutes</option>
                    </select>
                </div>
            </div>
            <div class="col-3">
                <div class="input-group mb-3">
                    <label class="input-group-text" for="inputGroupSelect01">Credit</label>
                    <input type="text" class="form-control" placeholder="Credit" aria-label="Max credit" @bind="Credit" disabled>
                    @if (Credit > 1)
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => { if (Credit > 1) Credit--; }"><i class="oi oi-minus smallicon" aria-hidden="true" /></button>
                    }
                    @if (Credit < 10)
                    {
                        <button class="btn btn-outline-secondary" type="button" @onclick="() => { if (Credit < 10) Credit++; }"><i class="oi oi-plus smallicon" aria-hidden="true" /></button>
                    }
                </div>
            </div>
            <div class="col-3">
                <div class="input-group mb-3">
                    <input type="text" class="form-control" placeholder="Languages" aria-label="Languages" value="@string.Join(", ", kiosk.Languages.Select(x => x.GetName()))" aria-describedby="button-addon2" disabled>
                    <button class="btn btn-outline-secondary" type="button" id="tuneLanguagesBtn" data-bs-toggle="modal" data-bs-target="#tuneLanguagesModal">Tune</button>
                </div>

                <!-- Modal: tune languages -->
                <div class="modal fade" id="tuneLanguagesModal" tabindex="-1" aria-labelledby="tuneLanguagesModalLabel" aria-hidden="true">
                    <div class="modal-dialog">
                        <div class="modal-content">
                            <div class="modal-header">
                                <h5 class="modal-title" id="tuneLanguagesModalLabel">Select languages</h5>
                                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                            </div>
                            <div class="modal-body">
                                @{
                                    bool theOnlyLanguage = LanguageList.Where(x => x.Index.HasValue).Count() <= 1;
                                    foreach (var language in LanguageList.OrderBy(x => x.Language.GetCode()))
                                    {
                                        <div class="form-check form-switch">
                                            <input id="lang_@language.Language.GetCode()" disabled="@(theOnlyLanguage && language.Index.HasValue)" class="form-check-input" type="checkbox" checked="@language.Index.HasValue" @oninput="(e) => OnLanguageChanged(language.Language, Convert.ToBoolean(e.Value))">
                                            <label class="form-check-label" for="lang_@language.Language.GetCode()">@language.AsMarkup()</label>
                                        </div>
                                    }
                                }
                            </div>
                            <div class="modal-footer">
                                <button type="button" class="btn btn-secondary close" data-dismiss="modal" data-bs-dismiss="modal">Close</button>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>
    </div>

    <h5>Replenishment</h5>

    <div class="btn-group" style="margin-bottom: 1rem" role="group" aria-label="Basic mixed styles example">
        <button type="button" class="btn btn-primary" @onclick="() => Replenish()">Replenish</button>
        <button type="button" class="btn btn-warning">Change planogram</button>
    </div>

    <h5>Products</h5>

    @if (productsToLink != null && productsToLink.Any())
    {
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#addLinkModal">
            Add
        </button>

        <!-- Modal: add product -->
        <div class="modal fade" id="addLinkModal" tabindex="-1" aria-labelledby="addLinkModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="addLinkModalLabel">Link product</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Sku</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var product in productsToLink)
                                {
                                    <tr>
                                        <td>
                                            @product.Sku
                                        </td>
                                        <td>
                                            <button type="button" class="btn btn-success" @onclick="() => AddProductLinkAsync(product.Sku)">Link</button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary close" data-dismiss="modal" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    }
    else
    {
        <span class="d-inline-block" tabindex="0" data-toggle="tooltip" title="Nothing to add">
            <button class="btn btn-primary" style="pointer-events: none;" type="button" disabled>Add</button>
        </span>
    }

    <table class="table">
        <thead>
            <tr>
                <th>Sku</th>
                <th>Name</th>
                <th>Credit</th>
                <th>Max quantity in order</th>
                <th>Remaining quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @if (kiosk.ProductLinks != null)
                @foreach (var link in kiosk.ProductLinks)
                {
                    <tr>
                        <td>
                            <button class="btn btn-light" @onclick="() => EditProduct(link.Product.Sku)">@link.Product.Sku</button>
                        </td>
                        <td>
                            <a data-toggle="tooltip" data-bs-html="true" title="<img src='data:image/*;base64,@link.Product.Picture' width='150' />">
                                @link.Product.Names.FirstOrDefault().Value
                            </a>
                        </td>
                        <td>
                            <div>
                                <input type="number" min="1" max="10" value="@link.Credit" @oninput="(e) => { link.Credit = Convert.ToInt32(e.Value); SetCredit(link.Product.Sku, link.Credit); }">
                            </div>
                        </td>
                        <td>
                            <div>
                                <input type="number" min="1" max="10" value="@link.MaxCountPerSession" @oninput="(e) => { link.MaxCountPerSession = Convert.ToInt32(e.Value); SetMaxCountPerSession(link.Product.Sku, link.MaxCountPerSession); }">
                            </div>
                        </td>
                        <td>
                            @link.RemainingQuantity
                        </td>
                        <td class="col-md-2">
                            @if (!link.Disabled)
                            {
                                <button type="button" class="btn btn-secondary" @onclick="() => DisableProduct(link.Product.Sku)">Disable</button>
                            }
                            else
                            {
                                <button type="button" class="btn btn-success" @onclick="() => EnableProduct(link.Product.Sku)">Enable</button>
                                <button type="button" class="btn btn-danger" @onclick="() => UnlinkProduct(link.Product.Sku)">Unlink</button>
                            }
                        </td>
                    </tr>
                }
        </tbody>
    </table>
}

@code {
    [Parameter]
    public string uid { get; set; }

    private Kiosk kiosk;
    private IEnumerable<Product> products;
    private IEnumerable<Product> productsToLink;

    private List<LangSelector> LanguageList = new List<LangSelector>();

    private bool _isOn = true;
    private bool IsOn
    {
        get => _isOn;
        set
        {
            _isOn = value;
            kiosk.IsOn = _isOn;

            new Task(async () =>
            {
                if (kiosk.IsOn)
                    await _client.KioskEnableAsync(kiosk.UID);
                else await _client.KioskDisableAsync(kiosk.UID);
            }).Start();
        }
    }

    private int _idleTimeout = 1;
    private int IdleTimeout
    {
        get => _idleTimeout;
        set
        {
            _idleTimeout = value;
            kiosk.IdleTimeout = TimeSpan.FromMinutes(_idleTimeout);
        }
    }

    private int _credit = 1;
    private int Credit
    {
        get => _credit;
        set
        {
            _credit = value;
            kiosk.Credit = _credit;
            new Task(async () => await _client.SetCreditAsync(kiosk.UID, _credit)).Start();
        }
    }

    protected override async Task OnInitializedAsync()
    {
        kiosk = kioskStateContainer.Value;

        _credit = kiosk.Credit;
        products = await _client.GetProductsAsync();
        productsToLink = kiosk.ProductLinks == null ? products : products.Where(x => !kiosk.ProductLinks.Any(l => l.Product.Sku == x.Sku));

        SetupBindVariables();
    }

    private void SetupBindVariables()
    {
        _isOn = kiosk.IsOn;
        _idleTimeout = (int)kiosk.IdleTimeout.TotalMinutes;

        foreach (var language in EnumHelpers.GetValues<Language>())
            LanguageList.Add(new LangSelector { Language = language, Index = kiosk.Languages.ToList().IndexOf(language) == -1 ? null : kiosk.Languages.ToList().IndexOf(language) + 1 });
    }

    private void EditProduct(string sku)
    {
        productStateContainer.SetValue(kiosk.ProductLinks.First(x => x.Product.Sku == sku).Product);
        navigationManager.NavigateTo($"/product/{sku}");
    }

    private async void DisableProduct(string sku)
    {
        await _client.DisableProductLinkAsync(kiosk.UID, sku);
        kiosk.ProductLinks.FirstOrDefault(x => x.Product.Sku == sku).Disabled = true;
        this.StateHasChanged();
    }

    private async void EnableProduct(string sku)
    {
        await _client.EnableProductLinkAsync(kiosk.UID, sku);
        kiosk.ProductLinks.FirstOrDefault(x => x.Product.Sku == sku).Disabled = false;
        this.StateHasChanged();
    }

    private async void UnlinkProduct(string sku)
    {
        await _client.DeleteProductLinkAsync(kiosk.UID, sku);
        kiosk.ProductLinks = kiosk.ProductLinks.Where(x => x.Product.Sku != sku);
        productsToLink = products.Where(x => !kiosk.ProductLinks.Any(l => l.Product.Sku == x.Sku));

        this.StateHasChanged();
    }

    private async Task AddProductLinkAsync(string sku)
    {
        await _client.AddProductLinkAsync(kiosk.UID, sku);
        var links = kiosk.ProductLinks.ToList();
        links.Insert(0, new KioskProductLink { Credit = 1, MaxCountPerSession = 1, RemainingQuantity = 0, Product = products.First(x => x.Sku == sku) });
        kiosk.ProductLinks = links;
        productsToLink = productsToLink.Where(x => x.Sku != sku);

        if (!productsToLink.Any())
            await JSRuntime.InvokeVoidAsync("ui.hideModalManually", "addLinkModal");

        this.StateHasChanged();
    }

    private async Task SetCredit(string sku, int credit)
        => await _client.SetCreditAsync(kiosk.UID, sku, credit);

    private async Task SetMaxCountPerSession(string sku, int maxCountPerSession)
        => await _client.SetMaxCountPerSession(kiosk.UID, sku, maxCountPerSession);

    private async Task OnLanguageChanged(Language lang, bool value)
    {
        IEnumerable<LangSelector> activeLanguages = LanguageList.Where(x => x.Index.HasValue);
        if (activeLanguages.Count() == 1 && activeLanguages.First().Language == lang && !value)
            return;

        Language? l = kiosk.Languages.FirstOrDefault(x => x == lang);
        if (l.HasValue && !value)
        {
            kiosk.Languages = kiosk.Languages.Where(x => x != lang);
        }
        else if (l == 0 && value)
        {
            var langList = kiosk.Languages.ToList();
            langList.Add(lang);
            kiosk.Languages = langList;
        }

        foreach (var language in LanguageList)
            language.Index = kiosk.Languages.Contains(language.Language) ? kiosk.Languages.ToList().IndexOf(kiosk.Languages.First(x => x == language.Language)) + 1 : null;

        await _client.AddOrUpdateKioskAsync(kiosk);
    }

    protected override void OnAfterRender(bool firstRender)
    {
        JSRuntime.InvokeVoidAsync("ui.activateTooltips");
    }

    private void Replenish()
    {
        kioskStateContainer.SetValue(kiosk);
        navigationManager.NavigateTo($"/replenishment/{uid}");
    }
}
