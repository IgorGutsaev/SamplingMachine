@page "/planogram/{uid}"
@using Filuet.Hardware.Dispensers.Abstractions.Models;
@using MPT.SamplingMachine.ApiClient;
@using MPT.Vending.API.Dto;
@using Portal.StateContainers;
@using System.Text.Json;
@using System.Diagnostics;
@attribute [StreamRendering(true)]
@inject IJSRuntime JSRuntime
@inject NavigationManager navigationManager
@inject SamplingMachineApiClient _client;
@inject KioskStateContainer kioskStateContainer

<PageTitle>Planogram</PageTitle>

<h1>Planogram</h1>

<p>
    @if (saving)
    {
        <button class="btn btn-primary btn-lg" type="button" disabled>
            <span class="spinner-border spinner-border-sm" role="status" aria-hidden="true"></span>
            Saving...
        </button>
    }
    else
    {
        <a href="/kiosk/@uid" type="button" class="btn btn-primary btn-lg">Back to @kiosk.UID</a>
    }
</p>

@if (planogram == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        @for (int i = 0; i < (int)Math.Ceiling(planogram.Addresses.Count() / 4m); i++)
        {
            <div class="row">
                @foreach (var address in planogram.Addresses.Skip(i * 4).Take(4))
                {
                    PoGRoute route = planogram.GetRoute(address);
                    <div class="col-3">
                        <div class="card" style="max-width: 18rem; align-items: center">
                            <label><b>Motor @address</b></label>
                            <div class="form-check form-switch" style="padding-top: 0.5rem">
                                <input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @bind="route.Active" />
                                <label class="form-check-label" for="flexSwitchCheckDefault">@(route.Active.HasValue && route.Active.Value ? "On" : "Off")</label>
                            </div>

                            <div class="input-group mb-3 ps-3 pe-3">
                                <label class="input-group-text" for="inputGroupSelect01">Max quantity</label>
                                <input type="text" class="form-control" placeholder="Credit" aria-label="Max quantity" @bind="route.MaxQuantity" disabled>
                                @if (route.MaxQuantity > 1)
                                {
                                    <button class="btn btn-outline-secondary" type="button" @onclick="() => { if (route.MaxQuantity > 1) route.MaxQuantity--; }"><i class="oi oi-minus smallicon" aria-hidden="true" /></button>
                                }
                                @if (route.MaxQuantity < 10)
                                {
                                    <button class="btn btn-outline-secondary" type="button" @onclick="() => { if (route.MaxQuantity < 10) route.MaxQuantity++; }"><i class="oi oi-plus smallicon" aria-hidden="true" /></button>
                                }
                            </div>

                            <div class="input-group mb-3 ps-3 pe-3">
                                <label class="input-group-text" for="inputGroupSelect01">Product</label>
                                <select class="form-select" id="inputGroupSelect01" @onchange="(e) => onProductChanged(e, address)">
                                    <option selected value="empty">Choose...</option>
                                    @foreach (var p in Products()) {
                                        var product = planogram.GetProduct(address);
                                        if (product != null && p.Sku == product.ProductUid)
                                        {
                                            <option selected value="@p.Sku">@($"{p.Sku} / {p.Names.FirstOrDefault()?.Value}")</option>
                                        }
                                        else
                                        {
                                            <option value="@p.Sku">@($"{p.Sku} / {p.Names.FirstOrDefault()?.Value}")</option>
                                        }
                                    }
                                </select>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <br />
        }
    </div>
}

<script>
    window.alert = (x) => {
        console.info(x);
    };
</script>

@code {
    [Parameter]
    public string uid { get; set; }

    private bool saving;

    private Kiosk kiosk;

    private PoG planogram;

    private Guid actualCommandUid = new Guid();

    protected override async Task OnInitializedAsync()
    {
        kiosk = kioskStateContainer.Value;
        planogram = await _client.GetPlanogramAsync(uid);
    }

    private IEnumerable<Product> Products()
    {
        return kiosk.ProductLinks.Select(x => x.Product).Distinct();        
    }

    private void onProductChanged(ChangeEventArgs e, string address)
    {
        Debug.Print($"product/address: > {e.Value}/{address}");
    }

    private async void OnPlanogramChanged()
    {
        saving = true;

        actualCommandUid = Guid.NewGuid();
        Guid token = actualCommandUid;

        await Task.Delay(1000).ContinueWith(async t =>
        {
            await Task.Run(async () =>
            {
                await Task.Delay(TimeSpan.FromSeconds(1));
                if (token == actualCommandUid)
                {
                    //await JSRuntime.InvokeVoidAsync("alert", JsonSerializer.Serialize(planogram));
                    Debug.Print(JsonSerializer.Serialize(planogram));
                    //await _client.PutPlanogramAsync(uid, planogram);
                    saving = false;
                    await InvokeAsync(StateHasChanged);
                }
            });
        });
    }

    private string GetStockLevel(PoGRoute route)
    {
        if (route.Quantity == route.MaxQuantity)
            return "success";
        else if (route.Quantity >= route.MaxQuantity / 2)
            return "primary";
        else if (route.Quantity < route.MaxQuantity / 2 && route.Quantity >= route.MaxQuantity / 4)
            return "warning";
        else return "danger";
    }
}